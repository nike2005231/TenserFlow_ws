Начнем с установки
Устанавливаем в вску 
2. .Net Runtime ...
1. C#
После качаем с браузера .Net core последнюю версию и устанавливаем ее. 
Чтобы проверить установился ли кор, достаточно ввести в cmd dotnet --version

dotnet new console 
dotnet restore
dotnet run
- прописываем в терминале чтобы собрать сборку C#


Using System;
Это основаная библиотека системы

Console.Write("...");
Console - class который обращается к Usnig System 
Write - метод который выводит данные
"" - тип данных string обязательно в двойных, ' ' - это что-то другое
; - используется после блока кода

Console.WriteLine("...");
Важен регистр команд!
WriteLine - как Write - только после команды переносит курсор на след. строку.




=====================
Объявление переменных
===================== 
type? name = value
Type - тип данных
? - может принимать значение  null
name - имя
value - значение перемннной






============
Типы данных:
============
String - строки
Char - одна строчная буква
Integer - целочисленный
Float - с плавающией точкой
Bool - True False

Чтобы создать новый C# скрипт нужно заново собирать сборку и для удобства делать это в отдельной папке.

Console.ReadLine() = input() тоже самое
чтобы задать переменной входные данные 
string? name  = Console.ReadLine() - на вход пойдут только строки, это C# епт

Чтобы конвертировать данные мы можем использовать медо Parse
int.Parse(name) - переобразует переменную в другой тип данных. Только ее нужно записать в новую перменную чтобы результата сохранился.
int a = int.Parse(name); 

Также конвертировать мы можем классом Convert, ток там типы данных записываются немного по другому
Convert.ToInt32("34"); 







=================================
Цикл While (true) или (name < 10)
=================================
{
--- блок кода
}
Смысл тот же запись другая







======
Массив
====== 
// Объявление массива целых чисел
int[] myArray;

// Инициализация массива с определенным размером
myArray = new int[5]; // массив с 5 элементами

// Инициализация массива с элементами
int[] numbers = new int[] { 1, 2, 3, 4, 5 };

// Краткая инициализация массива (компилятор сам определит размер)
int[] shorthandArray = { 1, 2, 3, 4, 5 };

numbers[1] = 10; // Заменяет второй элемент на 10
Array.Sort(name); - сортировка массива Array.Sort(people, 1, 3); - с первого по 3-ий элемент
Array.Resize(ref name, 4); - уменьшение массива до 4-эл, если указанно эл больше, то он увеличится
.Length(name) - возвращает длинну массива
Array.Reverse(numbers); - переворачивает элементы массива.
int index = Array.IndexOf(numbers, "sad"); - ищет индекс элемента в масиве





====
List
====
List<int> numbers = new List<int>(); - в <> указываем тип данных
numbers.Add(1); - добавить элемет в лист
numbers.Remove("AS"); - удаляет первое вхождение элемента "AS"
numbers.RemoveAt(0);  - удаляет элемент с индексом 0
numbers.Sort(); - сортировка списка
letters.Count; - получить размер списка
prices.Contains(9.99); -  проверяет есть ли 9.99 в списке.







==================
Простая арифметика
==================
+ Сложение
- Вычитание
* Умножение
/ Деление
% Остаток от деления
Помним про +=







=======
Условия
=======
if (a == 5)
{
    блок кода
}

esle if (a == 5) - это elif 
{
    блок кода
}

else
{
    блок кода
}

Могут быть вложенными








=========
Отношения
=========
== - равно
!= - не равно
> - больше
< - меньше
>= - больше, или равно
<= - меньше, или равно
&& - и
! - не
|| - или









===========
Модуль Math
===========
Math.Sqrt(4) - корень
Math.Pow(4, stepen) - степень
Math.Abs(number); - убирает -
Math.Max(a, b); - Возвращает самое большое число из двух.
Math.Min(a, b); - Возвращает меньшее число из двух.








===========================================
Инкремент 
a++; - это увеличение перменной на единицу
Декримент
а--; - уменьшение перемнной на единицу
===========================================
При постфиксном написании сначала возвращается значение переменной, а потом оно изменяется
А при префиксном сначала изменяется, а потом возвращается
Так вывод следующих программ будет отличаться:
int a = 10;
Console.WriteLine(a++); //10
Console.WriteLine(a); //11
int a = 10;
Console.WriteLine(++a); //11
Console.WriteLine(a); //11








===============================
Оператор case тот же if - else
===============================
int a = int.Parse(Console.ReadLine());
switch (a)
{
    case значение1:
        код,выполняемый если выражение имеет значение1
        break;
    case значение2:
        код,выполняемый если выражение имеет значение1
        break;
    //.............
    case значениеN:
        код, выполняемый если выражение имеет значениеN
        break;
    default:
        код, выполняемый если выражение не имеет ни одно из выше указанных значений
        break;
}







=============
Цикл DO WHILE
=============
Запомни: Отличие цикла do while в том, что он сначала выполняет какое-либо действие, а потом проверяет истинность условия для выполнения данного цикла.
Рассмотрим пример с циклом while:
while (false);
    {

        Console.WriteLine(“Привет!”);

    }
При выводе мы ничего не получим, так как в условии у нас false.

Теперь используем цикл do while:

do
    {

        Console.WriteLine(“Привет!”);

    } while (false);
При выводе мы получим:

Привет!
Таким образом, при помощи цикла do while тело цикла выполнится хотя бы один раз.








========
Цикл FOR
========
for (int i = 0; i < 5; i++)

int i = 0;  - объявление переменной i и присваивание ей значение 0 (значение можно изменять)
i < 5 - сколько раз цикл будет крутиться
i++ - инкременант обращающийся к i если i-- то идет в обратном порядке







=======
foreach
=======
крч for x in numbers:
в C# - прописывается так:
int[] numbers = { 1, 2, 3, 4, 5 };
foreach (int num in numbers)
{
    Console.WriteLine(num); // Печатает каждый элемент массива
}








=================
Написание методов
=================
public static void Name()
{
    блок кода этого метода
}
У нас есть основной метод в котором выполняется наша программа это public static void Main()
чтобы наш новый метод вызвался его нужно объявить в методе Main вот так
Name ();
Чтобы передать в метод параметры мы должны объявить их:
public static void Name(int x, string a)
чтобы вызвать метод с параметрами мы должны в методе Main вызвать наш новый метод и передать туда эти параметры. +- как в питухоне.
Name (10, "xyz");
return работает так же.







===============
Че-то типо надо
===============
Console.WriteLine("Привет!" + "Как дела?"); - строки можно сложить в одну
name [1] - индексация работает только вперед без -1
name.GetType() - Возвращает тип данных
// - коментарии
.Length - считает длинну строки
var - обозначает неявный тип данных, грубо говоря чтобы его не указывать.
CustomLibraryClass myObject = new CustomLibraryClass(); - чтобы использовать неймспейсы других библиотек нужно создать объект класса этого
неймспейса и потом обращатся через него к методам новых библиотек.







==================
Словарь Dictionary
==================
Dictionary<string, int> ageDictionary = new Dictionary<string, int>(); - создание пустого словаря.

var NAME = new Dictionary<string, string>() - заполненый словарь.
        {
            {"a", "Автомобиль ср.скорость = 80км.ч"},
            {"v", "Велосипед ср.скорость = 20км.ч"},
            {"m", "Мотоцикл ср.скорость = 40км.ч"},
            {"p", "Поезд ср.скорость = 150км.ч"},
            {"s", "Самолет ср.скорость = 1000км.ч"}
        };
Dictionary<string, string>() - тут тип Key и Value
вывод значение по ключу
Name["key"]

ageDictionary["Анна"] = 30; - добавление значение Анна с ключем 30 в словарь
ageDictionary.Remove("Петр"); - удаляет значение словаря
var keys = ageDictionary.Keys.ToList(); - получение всех ключей словоря
var values = ageDictionary.Values.ToList(); - получение всех значений словоря
ageDictionary.Count; - получение кол-ва элементов в словаре
ageDictionary.Clear(); - очистка словоря







============
Методы строк
============
text.Length; - возвращает длинну строки.
text.Substring(c 7 до 10); - срез.
text.ToUpper(); - Верхний регистр.
text.ToLower(); - Нижний регистр.
text.Trim(); - убирает пробелы по бокам строки.
text.Replace("это", "то"); - замена это в строке на то.
string[] parts = text.Split(','); - собирает массив из строки с разделителям внутри метода.
text.IndexOf("пример"); - возвращает идекс первого вхождения слова.
text.LastIndexOf("пример"); - возвращает идекс последнего вхождения слова.
text.StartsWith("Начинается"); - проверяет начинается ли строка с заддной внутри метода.
text.EndsWith("этой строкой"); - проверяет заканчивается ли строка с заддной внутри метода.
text.Contains("ключевое"); - проверяет есть ли такая подстрока в строке.
string.Concat(part1, part2); - объеденяет две строки.





====================
Исключения tru catch
====================
try
{
    // Код, который может вызвать исключение
}
catch ()
{
    // Обработка исключения
    Console.WriteLine("Произошла ошибка");
}
finally
{
    // Код, который будет выполнен всегда
}






================
Работа с файлами
================
для работы с файлами нужно создать пространство ограниченное, где мы непосредственно
будем выполнять одну из задачь, открывать файл, записывать что-то в него и тп

using (StreamWriter obj = new StreamWriter("spis.txt", append: true))
        {
            obj.WriteLine($"Имя - {x}");
            obj.WriteLine($"Фамилия - {y}");
            obj.WriteLine($"Полных лет - {z}");
        }
структура using() - позволяет сразу после завершения работы программы удалять не нужный кэш
и закрывает нам файл.
далле мы создаем объект obj
StreamWriter - класс на запись
StreamReader - класс на чтение

StreamWriter("spis.txt", append: true)) - первым указываем путь
второй параметр указывает режим, если нету append: true - то он бы очищал файл и записывал
в него с чистого листа.


using (StreamReader obj = new StreamReader("spis.txt"))
        {
            string line;
            
            while ((line = obj.ReadLine()) != null)
            {
                Console.WriteLine(line);
            }
            
        }
для чтения используем эту структуру.


===========
Windows form
===========

InitializeComponent(); - инициализация проекта
Button Da = new Button(); - создание объекта кнопки
Da.Text = "da"; - текст кнопки
Da.Location = new Point(50, 50); - Задаем локацию кнопки
Da.Size = new Size{ Width = 80, Height = 30 }; - Задаем ее размер
Da.Click += (o, e) => MessageBox.Show("Hello"); - Говорим что при клике выводилось привет.
this.Controls.Add(Da); - Добавляем кнопки на рабочее пространство

Легче это делать графически
Добавим на форму кнопку изменим размер имя и тд
Потом перейдем скрипт
private void button1_Click(object sender, EventArgs e)
{

}
Там появится эта кнопка в виде фунцкии
внутри можем прописать MessageBox.Show("asd") - оно выводит смс на экран при нажатии на кнопку
внутри функции формы
можем задать цвет формы и ее размер
this.BackColor = Color.Aquamarine;
this.ForeColor = Color.Red; - цвет текста
this.Width = 500;
this.Height = 500;
либо так this.Size = new Size(200,150);

Давай теперь добавим вторую форму и откроем ее по щелчку кнопки на первой, добавлять форму изи, сам разберешся.
крч на первой форме делаем новую кнопку и в коде прописываем
Form2 newForm = new Form2(); - создаем объект второй формы
newForm.Show(); - открываем нашу вторую форму
чтобы закрыть форму прописываем close();